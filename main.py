import os
import logging
import sqlite3
import secrets
import string
import asyncio
import time
from datetime import datetime
import hashlib

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = "8493433461:AAEZxG0Ix7em5ff3XHF36EZCmZyPMkf6WZE"
DEFAULT_ADMIN_PASSWORD = "admin123"  # –ü–∞—Ä–æ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
RECONNECT_DELAY = 5  # —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
MAX_RECONNECT_ATTEMPTS = 10  # –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è

# –•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª–µ–π
def hash_password(password):
    return hashlib.sha256(password.encode()).hexdigest()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('files.db', check_same_thread=False)
    cursor = conn.cursor()
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É files
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS files (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            file_id TEXT NOT NULL,
            file_name TEXT NOT NULL,
            file_type TEXT NOT NULL,
            download_id TEXT UNIQUE NOT NULL,
            upload_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            description TEXT,
            uploaded_by INTEGER
        )
    ''')
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É requests
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS requests (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            username TEXT,
            first_name TEXT,
            request_text TEXT NOT NULL,
            request_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            status TEXT DEFAULT 'pending',
            file_id TEXT,
            file_type TEXT,
            file_name TEXT
        )
    ''')
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER UNIQUE NOT NULL,
            username TEXT,
            first_name TEXT,
            password_hash TEXT,
            is_admin BOOLEAN DEFAULT FALSE,
            registration_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            last_login TIMESTAMP
        )
    ''')
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å–µ—Å—Å–∏–π
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS sessions (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            session_token TEXT UNIQUE NOT NULL,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            expires_at TIMESTAMP,
            FOREIGN KEY (user_id) REFERENCES users (user_id)
        )
    ''')
    
    # –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    cursor.execute('SELECT * FROM users WHERE is_admin = TRUE')
    if not cursor.fetchone():
        admin_hash = hash_password(DEFAULT_ADMIN_PASSWORD)
        cursor.execute('''
            INSERT OR IGNORE INTO users (user_id, username, first_name, password_hash, is_admin)
            VALUES (?, ?, ?, ?, ?)
        ''', (1, 'admin', 'Administrator', admin_hash, True))
        logger.info("–°–æ–∑–¥–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
    
    conn.commit()
    conn.close()
    logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
def generate_download_id():
    alphabet = string.ascii_letters + string.digits
    return ''.join(secrets.choice(alphabet) for _ in range(10))

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞ —Å–µ—Å—Å–∏–∏
def generate_session_token():
    return secrets.token_hex(32)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_user_session(user_id):
    conn = sqlite3.connect('files.db', check_same_thread=False)
    cursor = conn.cursor()
    cursor.execute('''
        SELECT u.user_id, u.username, u.first_name, u.is_admin 
        FROM users u 
        JOIN sessions s ON u.user_id = s.user_id 
        WHERE u.user_id = ? AND s.expires_at > datetime('now')
    ''', (user_id,))
    user = cursor.fetchone()
    conn.close()
    return user

# –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def create_user_session(user_id, is_admin=False):
    conn = sqlite3.connect('files.db', check_same_thread=False)
    cursor = conn.cursor()
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–µ—Å—Å–∏–∏
    cursor.execute('DELETE FROM sessions WHERE user_id = ?', (user_id,))
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é (–¥–µ–π—Å—Ç–≤—É–µ—Ç 30 –¥–Ω–µ–π)
    session_token = generate_session_token()
    expires_at = datetime.now().timestamp() + 30 * 24 * 60 * 60  # 30 –¥–Ω–µ–π
    
    cursor.execute('''
        INSERT INTO sessions (user_id, session_token, expires_at)
        VALUES (?, ?, datetime(?, 'unixepoch'))
    ''', (user_id, session_token, expires_at))
    
    conn.commit()
    conn.close()
    return session_token

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def register_user(user_id, username, first_name, password):
    conn = sqlite3.connect('files.db', check_same_thread=False)
    cursor = conn.cursor()
    
    password_hash = hash_password(password)
    
    try:
        cursor.execute('''
            INSERT INTO users (user_id, username, first_name, password_hash, is_admin)
            VALUES (?, ?, ?, ?, ?)
        ''', (user_id, username, first_name, password_hash, False))
        conn.commit()
        success = True
    except sqlite3.IntegrityError:
        success = False
    
    conn.close()
    return success

# –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def authenticate_user(user_id, password):
    conn = sqlite3.connect('files.db', check_same_thread=False)
    cursor = conn.cursor()
    
    cursor.execute('SELECT password_hash, is_admin FROM users WHERE user_id = ?', (user_id,))
    user = cursor.fetchone()
    conn.close()
    
    if user and user[0] == hash_password(password):
        return user[1]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º is_admin
    return None

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_user_stats(user_id):
    conn = sqlite3.connect('files.db', check_same_thread=False)
    cursor = conn.cursor()
    
    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    cursor.execute('SELECT COUNT(*) FROM files WHERE uploaded_by = ?', (user_id,))
    files_count = cursor.fetchone()[0]
    
    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    cursor.execute('SELECT COUNT(*) FROM requests WHERE user_id = ?', (user_id,))
    requests_count = cursor.fetchone()[0]
    
    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    cursor.execute('SELECT COUNT(*) FROM requests WHERE user_id = ? AND status = "approved"', (user_id,))
    approved_requests = cursor.fetchone()[0]
    
    conn.close()
    
    return {
        'files_count': files_count,
        'requests_count': requests_count,
        'approved_requests': approved_requests
    }

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
def add_admin(user_id, current_admin_id):
    conn = sqlite3.connect('files.db', check_same_thread=False)
    cursor = conn.cursor()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
    cursor.execute('SELECT is_admin FROM users WHERE user_id = ?', (current_admin_id,))
    current_user = cursor.fetchone()
    
    if not current_user or not current_user[0]:
        conn.close()
        return False
    
    # –î–µ–ª–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    cursor.execute('UPDATE users SET is_admin = TRUE WHERE user_id = ?', (user_id,))
    conn.commit()
    conn.close()
    
    return True

async def start(update, context):
    user = update.effective_user
    
    if context.args and len(context.args) > 0 and context.args[0].startswith('download-'):
        download_id = context.args[0].replace('download-', '')
        await handle_download(update, context, download_id)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_session = get_user_session(user.id)
    
    from telegram import InlineKeyboardButton, InlineKeyboardMarkup
    
    if user_session:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
        is_admin = user_session[3]
        
        if is_admin:
            keyboard = [
                [InlineKeyboardButton("üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data='personal_cabinet')],
                [InlineKeyboardButton("üë®‚Äçüíª –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data='admin_panel')],
                [InlineKeyboardButton("üì• –°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª", callback_data='download')],
                [InlineKeyboardButton("üì§ –ó–∞–ø—Ä–æ—Å–∏—Ç—å —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ —Ñ–∞–π–ª–∞", callback_data='request_upload')],
                [InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data='help')]
            ]
        else:
            keyboard = [
                [InlineKeyboardButton("üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data='personal_cabinet')],
                [InlineKeyboardButton("üì• –°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª", callback_data='download')],
                [InlineKeyboardButton("üì§ –ó–∞–ø—Ä–æ—Å–∏—Ç—å —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ —Ñ–∞–π–ª–∞", callback_data='request_upload')],
                [InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data='help')]
            ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        welcome_text = f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n\n"
        if is_admin:
            welcome_text += "üîß –í—ã –≤–æ—à–ª–∏ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä\n\n"
        welcome_text += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        
    else:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
        keyboard = [
            [InlineKeyboardButton("üîê –í–æ–π—Ç–∏", callback_data='login')],
            [InlineKeyboardButton("üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", callback_data='register')],
            [InlineKeyboardButton("üì• –°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª", callback_data='download')],
            [InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data='help')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        welcome_text = f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n\n" \
                      "üîê –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è\n\n" \
                      "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    
    if update.message:
        await update.message.reply_text(welcome_text, reply_markup=reply_markup)

async def handle_download(update, context, download_id):
    conn = sqlite3.connect('files.db', check_same_thread=False)
    cursor = conn.cursor()
    
    cursor.execute('SELECT file_id, file_name, file_type, description FROM files WHERE download_id = ?', (download_id,))
    file_data = cursor.fetchone()
    conn.close()
    
    if file_data:
        file_id, file_name, file_type, description = file_data
        
        caption = f"üìÅ {file_name}"
        if description:
            caption += f"\nüìù {description}"
        
        try:
            if file_type == 'photo':
                await update.message.reply_photo(file_id, caption=caption)
            elif file_type == 'video':
                await update.message.reply_video(file_id, caption=caption)
            elif file_type == 'document':
                await update.message.reply_document(file_id, caption=caption)
            elif file_type == 'audio':
                await update.message.reply_audio(file_id, caption=caption)
            else:
                await update.message.reply_document(file_id, caption=caption)
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: {e}")
    else:
        await update.message.reply_text("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —Å—Å—ã–ª–∫–∞ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞.")

async def login(update, context):
    user = update.effective_user
    
    if len(context.args) == 0:
        await update.message.reply_text(
            "üîê –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:\n"
            "–ü—Ä–∏–º–µ—Ä: /login –≤–∞—à_–ø–∞—Ä–æ–ª—å"
        )
        return
    
    password = context.args[0]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
    is_admin = authenticate_user(user.id, password)
    
    if is_admin is not None:
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
        create_user_session(user.id, is_admin)
        
        if is_admin:
            await update.message.reply_text("‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!")
        else:
            await update.message.reply_text("‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥!")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await start(update, context)
    else:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")

async def register(update, context):
    user = update.effective_user
    
    if len(context.args) == 0:
        await update.message.reply_text(
            "üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:\n"
            "–ü—Ä–∏–º–µ—Ä: /register –≤–∞—à_–ø–∞—Ä–æ–ª—å\n\n"
            "‚ö†Ô∏è –ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 6 —Å–∏–º–≤–æ–ª–æ–≤"
        )
        return
    
    password = context.args[0]
    
    if len(password) < 6:
        await update.message.reply_text("‚ùå –ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ –º–µ–Ω–µ–µ 6 —Å–∏–º–≤–æ–ª–æ–≤!")
        return
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    success = register_user(user.id, user.username, user.first_name, password)
    
    if success:
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
        create_user_session(user.id, False)
        await update.message.reply_text("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!")
        await start(update, context)
    else:
        await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!")

async def logout(update, context):
    user = update.effective_user
    
    # –£–¥–∞–ª—è–µ–º —Å–µ—Å—Å–∏—é
    conn = sqlite3.connect('files.db', check_same_thread=False)
    cursor = conn.cursor()
    cursor.execute('DELETE FROM sessions WHERE user_id = ?', (user.id,))
    conn.commit()
    conn.close()
    
    await update.message.reply_text("‚úÖ –í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã")
    await start(update, context)

async def personal_cabinet(update, context):
    query = update.callback_query
    await query.answer()
    
    user = query.from_user
    user_session = get_user_session(user.id)
    
    if not user_session:
        await query.edit_message_text("‚ùå –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ª–∏—á–Ω–æ–º—É –∫–∞–±–∏–Ω–µ—Ç—É —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è!")
        return
    
    is_admin = user_session[3]
    stats = get_user_stats(user.id)
    
    cabinet_text = f"üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç\n\n" \
                  f"üìõ –ò–º—è: {user.first_name}\n" \
                  f"üë§ Username: @{user.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n" \
                  f"üÜî ID: {user.id}\n" \
                  f"üîß –°—Ç–∞—Ç—É—Å: {'–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä' if is_admin else '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}\n\n" \
                  f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n" \
                  f"‚Ä¢ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {stats['files_count']}\n" \
                  f"‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {stats['requests_count']}\n" \
                  f"‚Ä¢ –û–¥–æ–±—Ä–µ–Ω–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {stats['approved_requests']}\n\n" \
                  f"üíæ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /logout –¥–ª—è –≤—ã—Ö–æ–¥–∞"
    
    from telegram import InlineKeyboardButton, InlineKeyboardMarkup
    
    keyboard = [
        [InlineKeyboardButton("üìä –ú–æ–∏ —Ñ–∞–π–ª—ã", callback_data='my_files')],
        [InlineKeyboardButton("üì® –ú–æ–∏ –∑–∞–ø—Ä–æ—Å—ã", callback_data='my_requests')],
    ]
    
    if is_admin:
        keyboard.append([InlineKeyboardButton("üë®‚Äçüíª –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data='admin_panel')])
    
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_main')])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(cabinet_text, reply_markup=reply_markup)

async def admin_panel(update, context):
    query = update.callback_query
    await query.answer()
    
    user = query.from_user
    user_session = get_user_session(user.id)
    
    if not user_session or not user_session[3]:
        await query.edit_message_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω! –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    from telegram import InlineKeyboardButton, InlineKeyboardMarkup
    
    keyboard = [
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='admin_stats')],
        [InlineKeyboardButton("üìÅ –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤", callback_data='admin_files')],
        [InlineKeyboardButton("üì® –ó–∞–ø—Ä–æ—Å—ã –Ω–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ", callback_data='admin_requests')],
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ñ–∞–π–ª", callback_data='admin_add_file')],
        [InlineKeyboardButton("üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏", callback_data='admin_users')],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_main')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        "üë®‚Äçüíª –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup
    )

async def admin_users(update, context):
    query = update.callback_query
    await query.answer()
    
    user = query.from_user
    user_session = get_user_session(user.id)
    
    if not user_session or not user_session[3]:
        await query.edit_message_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
        return
    
    conn = sqlite3.connect('files.db', check_same_thread=False)
    cursor = conn.cursor()
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    cursor.execute('''
        SELECT user_id, username, first_name, is_admin, registration_date 
        FROM users 
        ORDER BY registration_date DESC 
        LIMIT 20
    ''')
    users = cursor.fetchall()
    conn.close()
    
    if users:
        users_text = "üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
        for user_data in users:
            user_id, username, first_name, is_admin, reg_date = user_data
            status = "üëë –ê–¥–º–∏–Ω" if is_admin else "üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
            username_display = f"@{username}" if username else "–±–µ–∑ username"
            users_text += f"‚Ä¢ {first_name} ({username_display})\nID: {user_id}\n{status}\n–î–∞—Ç–∞: {reg_date[:10]}\n\n"
        
        users_text += "–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n/addadmin user_id"
    else:
        users_text = "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
    
    await query.edit_message_text(users_text)

async def add_admin_command(update, context):
    user = update.effective_user
    user_session = get_user_session(user.id)
    
    if not user_session or not user_session[3]:
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω! –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    if len(context.args) == 0:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /addadmin user_id")
        return
    
    try:
        new_admin_id = int(context.args[0])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        success = add_admin(new_admin_id, user.id)
        
        if success:
            await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {new_admin_id} —Ç–µ–ø–µ—Ä—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!")
        else:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
    
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç user_id!")

async def button_handler(update, context):
    query = update.callback_query
    await query.answer()
    
    data = query.data
    user_id = query.from_user.id
    
    if data == 'back_to_main':
        await start(update, context)
        return
    
    if data == 'login':
        await query.edit_message_text(
            "üîê –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
            "/login –≤–∞—à_–ø–∞—Ä–æ–ª—å"
        )
        return
    
    if data == 'register':
        await query.edit_message_text(
            "üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
            "/register –≤–∞—à_–ø–∞—Ä–æ–ª—å\n\n"
            "‚ö†Ô∏è –ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 6 —Å–∏–º–≤–æ–ª–æ–≤"
        )
        return
    
    if data == 'personal_cabinet':
        await personal_cabinet(update, context)
        return
    
    if data == 'admin_panel':
        await admin_panel(update, context)
        return
    
    if data == 'admin_users':
        await admin_users(update, context)
        return
    
    # –û—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    if data == 'download':
        await query.edit_message_text(
            "üì• –î–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É, "
            "–∫–æ—Ç–æ—Ä—É—é –≤–∞–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä."
        )
    
    elif data == 'request_upload':
        user_session = get_user_session(user_id)
        if not user_session:
            await query.edit_message_text("‚ùå –î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è!")
            return
            
        await query.edit_message_text(
            "üì§ –ó–∞–ø—Ä–æ—Å –Ω–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ —Ñ–∞–π–ª–∞\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å, "
            "–∏ –≤ –ø–æ–¥–ø–∏—Å–∏ –∫ –Ω–µ–º—É —É–∫–∞–∂–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ñ–∞–π–ª–∞.\n\n"
            "–í–∞—à –∑–∞–ø—Ä–æ—Å –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –Ω–∞
