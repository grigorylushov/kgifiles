import os
import logging
import sqlite3
import secrets
import string
import asyncio
import time
from datetime import datetime
import hashlib
import shutil
import requests
import json

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = "8493433461:AAEZxG0Ix7em5ff3XHF36EZCmZyPMkf6WZE"  # –ó–ê–ú–ï–ù–ò–¢–ï –ù–ê –í–ê–® –†–ï–ê–õ–¨–ù–´–ô –¢–û–ö–ï–ù
DEFAULT_ADMIN_PASSWORD = "34613461"

# GitHub –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è - –ó–ê–ü–û–õ–ù–ò–¢–ï –≠–¢–ò –î–ê–ù–ù–´–ï!
GITHUB_TOKEN = "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"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω
GITHUB_USERNAME = "grigorylushov"
GITHUB_REPO = "kgifiles"
GITHUB_BRANCH = "main"

# –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã
PRESET_ADMINS = [8112565926, 1]  # –î–æ–±–∞–≤–ª—è–µ–º –≤–∞—à–µ–≥–æ ID –∏ ID –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

# –•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª–µ–π
def hash_password(password):
    return hashlib.sha256(password.encode()).hexdigest()

# –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—É—Ç–∏ –∫ –ë–î
def get_db_path():
    return 'files.db'

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å GitHub
def upload_to_github():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç files.db –≤ GitHub"""
    try:
        if not os.path.exists('files.db'):
            logger.error("‚ùå –§–∞–π–ª files.db –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤ GitHub")
            return False
        
        if GITHUB_TOKEN == "YOUR_GITHUB_TOKEN_HERE":
            logger.warning("‚ö†Ô∏è GitHub —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É")
            return False
        
        # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
        with open('files.db', 'rb') as f:
            content = f.read()
        
        # –ö–æ–¥–∏—Ä—É–µ–º –≤ base64
        import base64
        content_b64 = base64.b64encode(content).decode('utf-8')
        
        # URL –¥–ª—è API GitHub
        url = f"https://api.github.com/repos/{GITHUB_USERNAME}/{GITHUB_REPO}/contents/files.db"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        headers = {
            'Authorization': f'token {GITHUB_TOKEN}',
            'Accept': 'application/vnd.github.v3+json'
        }
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π sha —Ñ–∞–π–ª–∞ (–µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
        response = requests.get(url, headers=headers)
        sha = None
        if response.status_code == 200:
            sha = response.json().get('sha')
        
        # –î–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
        data = {
            "message": f"Auto-backup: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}",
            "content": content_b64,
            "branch": GITHUB_BRANCH
        }
        
        if sha:
            data["sha"] = sha
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
        response = requests.put(url, headers=headers, data=json.dumps(data))
        
        if response.status_code in [200, 201]:
            logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –≤ GitHub")
            return True
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ GitHub: {response.status_code} - {response.text}")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤ GitHub: {e}")
        return False

def download_from_github():
    """–°–∫–∞—á–∏–≤–∞–µ—Ç files.db –∏–∑ GitHub"""
    try:
        if GITHUB_TOKEN == "YOUR_GITHUB_TOKEN_HERE":
            logger.warning("‚ö†Ô∏è GitHub —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ")
            return False
        
        url = f"https://api.github.com/repos/{GITHUB_USERNAME}/{GITHUB_REPO}/contents/files.db"
        
        headers = {
            'Authorization': f'token {GITHUB_TOKEN}',
            'Accept': 'application/vnd.github.v3+json'
        }
        
        response = requests.get(url, headers=headers)
        
        if response.status_code == 200:
            file_data = response.json()
            download_url = file_data.get('download_url')
            
            if download_url:
                file_response = requests.get(download_url)
                if file_response.status_code == 200:
                    with open('files.db', 'wb') as f:
                        f.write(file_response.content)
                    logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω–∞ –∏–∑ GitHub")
                    return True
        
        logger.warning("‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ GitHub, –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –ë–î")
        return False
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –∏–∑ GitHub: {e}")
        return False

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –ë–î
def backup_database():
    """–°–æ–∑–¥–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –≤ GitHub"""
    try:
        if os.path.exists('files.db'):
            # –õ–æ–∫–∞–ª—å–Ω–∞—è —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è
            backup_dir = 'backups'
            if not os.path.exists(backup_dir):
                os.makedirs(backup_dir)
            
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            backup_file = f"{backup_dir}/files_backup_{timestamp}.db"
            
            shutil.copy2('files.db', backup_file)
            logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –ª–æ–∫–∞–ª—å–Ω–∞—è —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_file}")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ GitHub
            if upload_to_github():
                logger.info("‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –≤ GitHub")
            else:
                logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤ GitHub")
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –ª–æ–∫–∞–ª—å–Ω—ã–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ (–æ—Å—Ç–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3)
            backups = sorted([f for f in os.listdir(backup_dir) if f.startswith('files_backup_')])
            if len(backups) > 3:
                for old_backup in backups[:-3]:
                    os.remove(os.path.join(backup_dir, old_backup))
                    logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞ —Å—Ç–∞—Ä–∞—è —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {old_backup}")
                    
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {e}")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    try:
        # –ü—Ä–æ–±—É–µ–º —Å–∫–∞—á–∞—Ç—å –∏–∑ GitHub
        logger.info("üîÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ GitHub...")
        downloaded = download_from_github()
        
        if not downloaded and not os.path.exists('files.db'):
            logger.info("üìù –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
        
        conn = sqlite3.connect(get_db_path(), check_same_thread=False)
        cursor = conn.cursor()
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É files
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS files (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                file_id TEXT NOT NULL,
                file_name TEXT NOT NULL,
                file_type TEXT NOT NULL,
                download_id TEXT UNIQUE NOT NULL,
                upload_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                description TEXT,
                uploaded_by INTEGER
            )
        ''')
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É requests
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS requests (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER NOT NULL,
                username TEXT,
                first_name TEXT,
                request_text TEXT NOT NULL,
                request_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                status TEXT DEFAULT 'pending',
                file_id TEXT,
                file_type TEXT,
                file_name TEXT
            )
        ''')
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER UNIQUE NOT NULL,
                username TEXT,
                first_name TEXT,
                password_hash TEXT,
                is_admin BOOLEAN DEFAULT FALSE,
                registration_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                last_login TIMESTAMP
            )
        ''')
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å–µ—Å—Å–∏–π
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS sessions (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER NOT NULL,
                session_token TEXT UNIQUE NOT NULL,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                expires_at TIMESTAMP,
                FOREIGN KEY (user_id) REFERENCES users (user_id)
            )
        ''')
        
        # –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        cursor.execute('SELECT user_id FROM users WHERE is_admin = TRUE')
        existing_admins = [row[0] for row in cursor.fetchall()]
        
        for admin_id in PRESET_ADMINS:
            if admin_id not in existing_admins:
                admin_hash = hash_password(DEFAULT_ADMIN_PASSWORD)
                cursor.execute('''
                    INSERT OR IGNORE INTO users (user_id, username, first_name, password_hash, is_admin)
                    VALUES (?, ?, ?, ?, ?)
                ''', (admin_id, f'admin_{admin_id}', 'Administrator', admin_hash, True))
                logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å ID: {admin_id}")
        
        conn.commit()
        conn.close()
        
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        backup_database()
        
        logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
def generate_download_id():
    alphabet = string.ascii_letters + string.digits
    return ''.join(secrets.choice(alphabet) for _ in range(10))

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞ —Å–µ—Å—Å–∏–∏
def generate_session_token():
    return secrets.token_hex(32)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_user_session(user_id):
    try:
        conn = sqlite3.connect(get_db_path(), check_same_thread=False)
        cursor = conn.cursor()
        cursor.execute('''
            SELECT u.user_id, u.username, u.first_name, u.is_admin 
            FROM users u 
            JOIN sessions s ON u.user_id = s.user_id 
            WHERE u.user_id = ? AND s.expires_at > datetime('now')
        ''', (user_id,))
        user = cursor.fetchone()
        conn.close()
        return user
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏: {e}")
        return None

# –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def create_user_session(user_id, is_admin=False):
    try:
        conn = sqlite3.connect(get_db_path(), check_same_thread=False)
        cursor = conn.cursor()
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–µ—Å—Å–∏–∏
        cursor.execute('DELETE FROM sessions WHERE user_id = ?', (user_id,))
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é (–¥–µ–π—Å—Ç–≤—É–µ—Ç 30 –¥–Ω–µ–π)
        session_token = generate_session_token()
        expires_at = datetime.now().timestamp() + 30 * 24 * 60 * 60
        
        cursor.execute('''
            INSERT INTO sessions (user_id, session_token, expires_at)
            VALUES (?, ?, datetime(?, 'unixepoch'))
        ''', (user_id, session_token, expires_at))
        
        conn.commit()
        conn.close()
        return session_token
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏: {e}")
        return None

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def register_user(user_id, username, first_name, password):
    try:
        conn = sqlite3.connect(get_db_path(), check_same_thread=False)
        cursor = conn.cursor()
        
        password_hash = hash_password(password)
        
        try:
            cursor.execute('''
                INSERT INTO users (user_id, username, first_name, password_hash, is_admin)
                VALUES (?, ?, ?, ?, ?)
            ''', (user_id, username, first_name, password_hash, False))
            conn.commit()
            success = True
        except sqlite3.IntegrityError:
            success = False
        
        conn.close()
        return success
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        return False

# –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def authenticate_user(user_id, password):
    try:
        conn = sqlite3.connect(get_db_path(), check_same_thread=False)
        cursor = conn.cursor()
        
        cursor.execute('SELECT password_hash, is_admin FROM users WHERE user_id = ?', (user_id,))
        user = cursor.fetchone()
        conn.close()
        
        if user and user[0] == hash_password(password):
            return user[1]
        return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")
        return None

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_user_stats(user_id):
    try:
        conn = sqlite3.connect(get_db_path(), check_same_thread=False)
        cursor = conn.cursor()
        
        cursor.execute('SELECT COUNT(*) FROM files WHERE uploaded_by = ?', (user_id,))
        files_count = cursor.fetchone()[0]
        
        cursor.execute('SELECT COUNT(*) FROM requests WHERE user_id = ?', (user_id,))
        requests_count = cursor.fetchone()[0]
        
        cursor.execute('SELECT COUNT(*) FROM requests WHERE user_id = ? AND status = "approved"', (user_id,))
        approved_requests = cursor.fetchone()[0]
        
        conn.close()
        
        return {
            'files_count': files_count,
            'requests_count': requests_count,
            'approved_requests': approved_requests
        }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        return {'files_count': 0, 'requests_count': 0, 'approved_requests': 0}

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
def add_admin(user_id, current_admin_id):
    try:
        conn = sqlite3.connect(get_db_path(), check_same_thread=False)
        cursor = conn.cursor()
        
        cursor.execute('SELECT is_admin FROM users WHERE user_id = ?', (current_admin_id,))
        current_user = cursor.fetchone()
        
        if not current_user or not current_user[0]:
            conn.close()
            return False
        
        cursor.execute('UPDATE users SET is_admin = TRUE WHERE user_id = ?', (user_id,))
        conn.commit()
        conn.close()
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞: {e}")
        return False

async def start(update, context):
    try:
        user = update.effective_user
        
        if context.args and len(context.args) > 0 and context.args[0].startswith('download-'):
            download_id = context.args[0].replace('download-', '')
            await handle_download(update, context, download_id)
            return
        
        user_session = get_user_session(user.id)
        
        from telegram import InlineKeyboardButton, InlineKeyboardMarkup
        
        if user_session:
            is_admin = user_session[3]
            
            if is_admin:
                keyboard = [
                    [InlineKeyboardButton("üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data='personal_cabinet')],
                    [InlineKeyboardButton("üë®‚Äçüíª –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data='admin_panel')],
                    [InlineKeyboardButton("üì• –°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª", callback_data='download')],
                    [InlineKeyboardButton("üì§ –ó–∞–ø—Ä–æ—Å–∏—Ç—å —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ —Ñ–∞–π–ª–∞", callback_data='request_upload')],
                    [InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data='help')]
                ]
            else:
                keyboard = [
                    [InlineKeyboardButton("üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data='personal_cabinet')],
                    [InlineKeyboardButton("üì• –°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª", callback_data='download')],
                    [InlineKeyboardButton("üì§ –ó–∞–ø—Ä–æ—Å–∏—Ç—å —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ —Ñ–∞–π–ª–∞", callback_data='request_upload')],
                    [InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data='help')]
                ]
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            welcome_text = f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n\n"
            if is_admin:
                welcome_text += "üîß –í—ã –≤–æ—à–ª–∏ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä\n\n"
            welcome_text += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
            
        else:
            keyboard = [
                [InlineKeyboardButton("üîê –í–æ–π—Ç–∏", callback_data='login')],
                [InlineKeyboardButton("üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", callback_data='register')],
                [InlineKeyboardButton("üì• –°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª", callback_data='download')],
                [InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data='help')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            welcome_text = f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n\n" \
                          "üîê –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è\n\n" \
                          "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        
        if update.message:
            await update.message.reply_text(welcome_text, reply_markup=reply_markup)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ start: {e}")

async def handle_download(update, context, download_id):
    try:
        conn = sqlite3.connect(get_db_path(), check_same_thread=False)
        cursor = conn.cursor()
        
        cursor.execute('SELECT file_id, file_name, file_type, description FROM files WHERE download_id = ?', (download_id,))
        file_data = cursor.fetchone()
        conn.close()
        
        if file_data:
            file_id, file_name, file_type, description = file_data
            
            caption = f"üìÅ {file_name}"
            if description:
                caption += f"\nüìù {description}"
            
            try:
                if file_type == 'photo':
                    await update.message.reply_photo(file_id, caption=caption)
                elif file_type == 'video':
                    await update.message.reply_video(file_id, caption=caption)
                elif file_type == 'document':
                    await update.message.reply_document(file_id, caption=caption)
                elif file_type == 'audio':
                    await update.message.reply_audio(file_id, caption=caption)
                else:
                    await update.message.reply_document(file_id, caption=caption)
            except Exception as e:
                await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: {e}")
        else:
            await update.message.reply_text("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —Å—Å—ã–ª–∫–∞ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_download: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")

async def login(update, context):
    try:
        user = update.effective_user
        
        if len(context.args) == 0:
            await update.message.reply_text(
                "üîê –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:\n"
                "–ü—Ä–∏–º–µ—Ä: /login –≤–∞—à_–ø–∞—Ä–æ–ª—å"
            )
            return
        
        password = context.args[0]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
        is_admin = authenticate_user(user.id, password)
        
        if is_admin is not None:
            # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
            create_user_session(user.id, is_admin)
            
            if is_admin:
                await update.message.reply_text("‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!")
            else:
                await update.message.reply_text("‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥!")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            await start(update, context)
        else:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ login: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ")

async def register(update, context):
    try:
        user = update.effective_user
        
        if len(context.args) == 0:
            await update.message.reply_text(
                "üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:\n"
                "–ü—Ä–∏–º–µ—Ä: /register –≤–∞—à_–ø–∞—Ä–æ–ª—å\n\n"
                "‚ö†Ô∏è –ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 6 —Å–∏–º–≤–æ–ª–æ–≤"
            )
            return
        
        password = context.args[0]
        
        if len(password) < 6:
            await update.message.reply_text("‚ùå –ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ –º–µ–Ω–µ–µ 6 —Å–∏–º–≤–æ–ª–æ–≤!")
            return
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        success = register_user(user.id, user.username, user.first_name, password)
        
        if success:
            # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
            create_user_session(user.id, False)
            await update.message.reply_text("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!")
            await start(update, context)
        else:
            await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ register: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")

async def logout(update, context):
    try:
        user = update.effective_user
        
        # –£–¥–∞–ª—è–µ–º —Å–µ—Å—Å–∏—é
        conn = sqlite3.connect(get_db_path(), check_same_thread=False)
        cursor = conn.cursor()
        cursor.execute('DELETE FROM sessions WHERE user_id = ?', (user.id,))
        conn.commit()
        conn.close()
        
        await update.message.reply_text("‚úÖ –í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã")
        await start(update, context)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ logout: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ")

async def personal_cabinet(update, context):
    try:
        query = update.callback_query
        await query.answer()
        
        user = query.from_user
        user_session = get_user_session(user.id)
        
        if not user_session:
            await query.edit_message_text("‚ùå –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ª–∏—á–Ω–æ–º—É –∫–∞–±–∏–Ω–µ—Ç—É —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è!")
            return
        
        is_admin = user_session[3]
        stats = get_user_stats(user.id)
        
        cabinet_text = f"üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç\n\n" \
                      f"üìõ –ò–º—è: {user.first_name}\n" \
                      f"üë§ Username: @{user.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n" \
                      f"üÜî ID: {user.id}\n" \
                      f"üîß –°—Ç–∞—Ç—É—Å: {'–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä' if is_admin else '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}\n\n" \
                      f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n" \
                      f"‚Ä¢ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {stats['files_count']}\n" \
                      f"‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {stats['requests_count']}\n" \
                      f"‚Ä¢ –û–¥–æ–±—Ä–µ–Ω–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {stats['approved_requests']}\n\n" \
                      f"üíæ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /logout –¥–ª—è –≤—ã—Ö–æ–¥–∞"
        
        from telegram import InlineKeyboardButton, InlineKeyboardMarkup
        
        keyboard = [
            [InlineKeyboardButton("üìä –ú–æ–∏ —Ñ–∞–π–ª—ã", callback_data='my_files')],
            [InlineKeyboardButton("üì® –ú–æ–∏ –∑–∞–ø—Ä–æ—Å—ã", callback_data='my_requests')],
        ]
        
        if is_admin:
            keyboard.append([InlineKeyboardButton("üë®‚Äçüíª –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data='admin_panel')])
        
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_main')])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(cabinet_text, reply_markup=reply_markup)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ personal_cabinet: {e}")

async def admin_panel(update, context):
    try:
        query = update.callback_query
        await query.answer()
        
        user = query.from_user
        user_session = get_user_session(user.id)
        
        if not user_session or not user_session[3]:
            await query.edit_message_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω! –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return
        
        from telegram import InlineKeyboardButton, InlineKeyboardMarkup
        
        keyboard = [
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='admin_stats')],
            [InlineKeyboardButton("üìÅ –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤", callback_data='admin_files')],
            [InlineKeyboardButton("üì® –ó–∞–ø—Ä–æ—Å—ã –Ω–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ", callback_data='admin_requests')],
            [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ñ–∞–π–ª", callback_data='admin_add_file')],
            [InlineKeyboardButton("üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏", callback_data='admin_users')],
            [InlineKeyboardButton("üíæ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è", callback_data='admin_backup')],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_main')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "üë®‚Äçüíª –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ admin_panel: {e}")

async def admin_users(update, context):
    try:
        query = update.callback_query
        await query.answer()
        
        user = query.from_user
        user_session = get_user_session(user.id)
        
        if not user_session or not user_session[3]:
            await query.edit_message_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
            return
        
        conn = sqlite3.connect(get_db_path(), check_same_thread=False)
        cursor = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        cursor.execute('''
            SELECT user_id, username, first_name, is_admin, registration_date 
            FROM users 
            ORDER BY registration_date DESC 
            LIMIT 20
        ''')
        users = cursor.fetchall()
        conn.close()
        
        if users:
            users_text = "üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
            for user_data in users:
                user_id, username, first_name, is_admin, reg_date = user_data
                status = "üëë –ê–¥–º–∏–Ω" if is_admin else "üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
                username_display = f"@{username}" if username else "–±–µ–∑ username"
                users_text += f"‚Ä¢ {first_name} ({username_display})\nID: {user_id}\n{status}\n–î–∞—Ç–∞: {reg_date[:10]}\n\n"
            
            users_text += "–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n/addadmin user_id"
        else:
            users_text = "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        
        await query.edit_message_text(users_text)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ admin_users: {e}")

async def add_admin_command(update, context):
    try:
        user = update.effective_user
        user_session = get_user_session(user.id)
        
        if not user_session or not user_session[3]:
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω! –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return
        
        if len(context.args) == 0:
            await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /addadmin user_id")
            return
        
        try:
            new_admin_id = int(context.args[0])
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            success = add_admin(new_admin_id, user.id)
            
            if success:
                await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {new_admin_id} —Ç–µ–ø–µ—Ä—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!")
            else:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
        
        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç user_id!")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ add_admin_command: {e}")

# –ù–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
async def backup_command(update, context):
    try:
        user = update.effective_user
        user_session = get_user_session(user.id)
        
        if not user_session or not user_session[3]:
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω! –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return
        
        await update.message.reply_text("üîÑ –°–æ–∑–¥–∞—é —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é...")
        backup_database()
        await update.message.reply_text("‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞ –∏ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –≤ GitHub!")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ backup_command: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏")

async def button_handler(update, context):
    try:
        query = update.callback_query
        await query.answer()
        
        data = query.data
        user_id = query.from_user.id
        
        if data == 'back_to_main':
            await start(update, context)
            return
        
        if data == 'login':
            await query.edit_message_text(
                "üîê –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
                "/login –≤–∞—à_–ø–∞—Ä–æ–ª—å"
            )
            return
        
        if data == 'register':
            await query.edit_message_text(
                "üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
                "/register –≤–∞—à_–ø–∞—Ä–æ–ª—å\n\n"
                "‚ö†Ô∏è –ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 6 —Å–∏–º–≤–æ–ª–æ–≤"
            )
            return
        
        if data == 'personal_cabinet':
            await personal_cabinet(update, context)
            return
        
        if data == 'admin_panel':
            await admin_panel(update, context)
            return
        
        if data == 'admin_users':
            await admin_users(update, context)
            return
        
        if data == 'admin_backup':
            user_session = get_user_session(user_id)
            if not user_session or not user_session[3]:
                await query.edit_message_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
                return
                
            await query.edit_message_text("üîÑ –°–æ–∑–¥–∞—é —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é...")
            backup_database()
            await query.edit_message_text("‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞ –∏ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –≤ GitHub!")
            return
        
        if data == 'download':
            await query.edit_message_text(
                "üì• –î–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É, "
                "–∫–æ—Ç–æ—Ä—É—é –≤–∞–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä."
            )
        
        elif data == 'request_upload':
            user_session = get_user_session(user_id)
            if not user_session:
                await query.edit_message_text("‚ùå –î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è!")
                return
                
            await query.edit_message_text(
                "üì§ –ó–∞–ø—Ä–æ—Å –Ω–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ —Ñ–∞–π–ª–∞\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å, "
                "–∏ –≤ –ø–æ–¥–ø–∏—Å–∏ –∫ –Ω–µ–º—É —É–∫–∞–∂–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ñ–∞–π–ª–∞.\n\n"
                "–í–∞—à –∑–∞–ø—Ä–æ—Å –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ."
            )
            context.user_data['awaiting_file'] = True
        
        elif data == 'help':
            await query.edit_message_text(
                "‚ÑπÔ∏è –ü–æ–º–æ—â—å\n\n"
                "–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç:\n"
                "‚Ä¢ –î–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Å—ã–ª–∫—É –≤–∏–¥–∞: https://t.me/your_bot?start=download-UNIQUE_ID\n"
                "‚Ä¢ –î–ª—è –∑–∞–ø—Ä–æ—Å–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Ñ–∞–π–ª–∞ - –Ω–∞–∂–º–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º\n"
                "‚Ä¢ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å —Ñ–∞–π–ª–∞–º–∏ —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å\n"
                "‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∏ –≤—Ö–æ–¥–∏—Ç—å –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç\n\n"
                "–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
        
        elif data == 'my_files':
            user_session = get_user_session(user_id)
            if not user_session:
                await query.edit_message_text("‚ùå –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ñ–∞–π–ª–æ–≤ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è!")
                return
                
            conn = sqlite3.connect(get_db_path(), check_same_thread=False)
            cursor = conn.cursor()
            cursor.execute('SELECT file_name, download_id, upload_date FROM files WHERE uploaded_by = ? ORDER BY upload_date DESC LIMIT 10', (user_id,))
            files = cursor.fetchall()
            conn.close()
            
            if files:
                files_text = "üìÅ –í–∞—à–∏ —Ñ–∞–π–ª—ã:\n\n"
                for file in files:
                    file_name, download_id, upload_date = file
                    files_text += f"‚Ä¢ {file_name}\nID: {download_id}\n–î–∞—Ç–∞: {upload_date[:10]}\n\n"
            else:
                files_text = "üìÅ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ñ–∞–π–ª–æ–≤"
            
            await query.edit_message_text(files_text)
        
        elif data == 'my_requests':
            user_session = get_user_session(user_id)
            if not user_session:
                await query.edit_message_text("‚ùå –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è!")
                return
                
            conn = sqlite3.connect(get_db_path(), check_same_thread=False)
            cursor = conn.cursor()
            cursor.execute('SELECT request_text, status, request_date FROM requests WHERE user_id = ? ORDER BY request_date DESC LIMIT 10', (user_id,))
            requests = cursor.fetchall()
            conn.close()
            
            if requests:
                requests_text = "üì® –í–∞—à–∏ –∑–∞–ø—Ä–æ—Å—ã:\n\n"
                for req in requests:
                    text, status, date = req
                    status_icon = "‚úÖ" if status == "approved" else "‚ùå" if status == "rejected" else "‚è≥"
                    requests_text += f"{status_icon} {text}\n–°—Ç–∞—Ç—É—Å: {status}\n–î–∞—Ç–∞: {date[:10]}\n\n"
            else:
                requests_text = "üì® –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø—Ä–æ—Å–æ–≤"
            
            await query.edit_message_text(requests_text)
        
        elif data.startswith('admin_'):
            user_session = get_user_session(user_id)
            if not user_session or not user_session[3]:
                await query.edit_message_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
                return
            
            if data == 'admin_stats':
                conn = sqlite3.connect(get_db_path(), check_same_thread=False)
                cursor = conn.cursor()
                
                cursor.execute('SELECT COUNT(*) FROM files')
                files_count = cursor.fetchone()[0]
                
                cursor.execute('SELECT COUNT(*) FROM requests WHERE status = "pending"')
                pending_requests = cursor.fetchone()[0]
                
                cursor.execute('SELECT COUNT(*) FROM users')
                users_count = cursor.fetchone()[0]
                
                cursor.execute('SELECT COUNT(*) FROM users WHERE is_admin = TRUE')
                admins_count = cursor.fetchone()[0]
                
                conn.close()
                
                await query.edit_message_text(
                    f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã\n\n"
                    f"‚Ä¢ –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {files_count}\n"
                    f"‚Ä¢ –û–∂–∏–¥–∞—é—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {pending_requests}\n"
                    f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_count}\n"
                    f"‚Ä¢ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {admins_count}"
                )
            
            elif data == 'admin_files':
                conn = sqlite3.connect(get_db_path(), check_same_thread=False)
                cursor = conn.cursor()
                cursor.execute('SELECT id, file_name, download_id, upload_date FROM files ORDER BY upload_date DESC LIMIT 10')
                files = cursor.fetchall()
                conn.close()
                
                if files:
                    files_list = "üìÅ –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ñ–∞–π–ª—ã:\n\n"
                    for file in files:
                        file_id, file_name, download_id, upload_date = file
                        files_list += f"‚Ä¢ {file_name}\nID: {download_id}\n–î–∞—Ç–∞: {upload_date[:10]}\n\n"
                    
                    # –ü–æ–ª—É—á–∞–µ–º username –±–æ—Ç–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ
                    try:
                        bot_username = context.bot.username
                        files_list += f"–°—Å—ã–ª–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è:\nhttps://t.me/{bot_username}?start=download-"
                    except:
                        files_list += "–°—Å—ã–ª–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è:\nhttps://t.me/your_bot?start=download-"
                else:
                    files_list = "üìÅ –§–∞–π–ª—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç"
                
                await query.edit_message_text(files_list)
            
            elif data == 'admin_requests':
                conn = sqlite3.connect(get_db_path(), check_same_thread=False)
                cursor = conn.cursor()
                cursor.execute('''
                    SELECT id, user_id, username, first_name, request_text, request_date, file_id, file_type, file_name
                    FROM requests 
                    WHERE status = "pending" 
                    ORDER BY request_date DESC
                ''')
                requests = cursor.fetchall()
                conn.close()
                
                if requests:
                    requests_text = "üì® –û–∂–∏–¥–∞—é—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã:\n\n"
                    for req in requests:
                        req_id, user_id, username, first_name, request_text, request_date, file_id, file_type, file_name = req
                        username = username or "–ù–µ —É–∫–∞–∑–∞–Ω"
                        file_name_display = file_name or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
                        requests_text += f"üÜî {req_id}\nüë§ {first_name} (@{username})\nID: {user_id}\nüìù {request_text}\nüìÅ –§–∞–π–ª: {file_name_display}\nüìÖ {request_date[:10]}\n\n"
                    
                    requests_text += "–î–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /approve <id> –∏–ª–∏ /reject <id>"
                else:
                    requests_text = "‚úÖ –ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"
                
                await query.edit_message_text(requests_text)
            
            elif data == 'admin_add_file':
                await query.edit_message_text(
                    "‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞\n\n"
                    "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å. "
                    "–í –ø–æ–¥–ø–∏—Å–∏ –∫ —Ñ–∞–π–ª—É –º–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ."
                )
                context.user_data['admin_adding_file'] = True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ button_handler: {e}")

def get_file_name(message):
    if message.document:
        return message.document.file_name or "document"
    elif message.photo:
        return "photo.jpg"
    elif message.video:
        return message.video.file_name or "video.mp4"
    elif message.audio:
        return message.audio.file_name or "audio.mp3"
    return "file"

async def handle_file(update, context):
    try:
        user_id = update.effective_user.id
        message = update.message
        
        if not message:
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ
        if context.user_data.get('awaiting_file'):
            user_session = get_user_session(user_id)
            if not user_session:
                await message.reply_text("‚ùå –î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è!")
                context.user_data['awaiting_file'] = False
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –° –§–ê–ô–õ–û–ú
            conn = sqlite3.connect(get_db_path(), check_same_thread=False)
            cursor = conn.cursor()
            
            file_type = None
            file_id = None
            file_name = None
            
            if message.document:
                file_type = 'document'
                file_id = message.document.file_id
                file_name = message.document.file_name or "document"
            elif message.photo:
                file_type = 'photo'
                file_id = message.photo[-1].file_id
                file_name = "photo.jpg"
            elif message.video:
                file_type = 'video'
                file_id = message.video.file_id
                file_name = message.video.file_name or "video.mp4"
            elif message.audio:
                file_type = 'audio'
                file_id = message.audio.file_id
                file_name = message.audio.file_name or "audio.mp3"
            
            description = message.caption or "–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è"
            
            try:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ñ–∞–π–ª–µ
                cursor.execute('''
                    INSERT INTO requests (user_id, username, first_name, request_text, file_id, file_type, file_name)
                    VALUES (?, ?, ?, ?, ?, ?, ?)
                ''', (user_id, update.effective_user.username, update.effective_user.first_name, description, file_id, file_type, file_name))
                
                conn.commit()
                request_id = cursor.lastrowid
                conn.close()
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
                conn = sqlite3.connect(get_db_path(), check_same_thread=False)
                cursor = conn.cursor()
                cursor.execute('SELECT user_id FROM users WHERE is_admin = TRUE')
                admins = cursor.fetchall()
                conn.close()
                
                for admin in admins:
                    try:
                        await context.bot.send_message(
                            admin[0],
                            f"üì® –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ —Ñ–∞–π–ª–∞!\n\n"
                            f"üÜî ID –∑–∞–ø—Ä–æ—Å–∞: {request_id}\n"
                            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {update.effective_user.first_name} (@{update.effective_user.username or '–Ω–µ—Ç'})\n"
                            f"üÜî User ID: {user_id}\n"
                            f"üìÅ –§–∞–π–ª: {file_name}\n"
                            f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {description}\n\n"
                            f"–î–ª—è –æ–¥–æ–±—Ä–µ–Ω–∏—è: /approve {request_id}\n"
                            f"–î–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è: /reject {request_id}"
                        )
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin[0]}: {e}")
                
                await message.reply_text(
                    "‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ. "
                    "–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ –∑–∞–ø—Ä–æ—Å –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω."
                )
                context.user_data['awaiting_file'] = False
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞: {e}")
                await message.reply_text(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. "
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ."
                )
                conn.close()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ–±–∞–≤–ª—è–µ—Ç –ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Ñ–∞–π–ª –Ω–∞–ø—Ä—è–º—É—é
        elif context.user_data.get('admin_adding_file'):
            user_session = get_user_session(user_id)
            if not user_session or not user_session[3]:
                await message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω! –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
                context.user_data['admin_adding_file'] = False
                return
                
            file_type = None
            file_id = None
            
            if message.document:
                file_type = 'document'
                file_id = message.document.file_id
            elif message.photo:
                file_type = 'photo'
                file_id = message.photo[-1].file_id
            elif message.video:
                file_type = 'video'
                file_id = message.video.file_id
            elif message.audio:
                file_type = 'audio'
                file_id = message.audio.file_id
            
            if file_id:
                download_id = generate_download_id()
                file_name = get_file_name(message)
                description = message.caption or "–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è"
                
                conn = sqlite3.connect(get_db_path(), check_same_thread=False)
                cursor = conn.cursor()
                cursor.execute('''
                    INSERT INTO files (file_id, file_name, file_type, download_id, description, uploaded_by)
                    VALUES (?, ?, ?, ?, ?, ?)
                ''', (file_id, file_name, file_type, download_id, description, user_id))
                conn.commit()
                conn.close()
                
                # –ü–æ–ª—É—á–∞–µ–º username –±–æ—Ç–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ
                try:
                    bot_username = context.bot.username
                    download_link = f"https://t.me/{bot_username}?start=download-{download_id}"
                except:
                    download_link = f"–°—Å—ã–ª–∫–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞"
                
                await message.reply_text(
                    f"‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
                    f"üìÅ –ò–º—è: {file_name}\n"
                    f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {description}\n"
                    f"üîó –°—Å—ã–ª–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è:\n{download_link}"
                )
            
            context.user_data['admin_adding_file'] = False
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_file: {e}")

async def approve_request(update, context):
    try:
        user = update.effective_user
        user_session = get_user_session(user.id)
        
        if not user_session or not user_session[3]:
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω! –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return
        
        if len(context.args) == 0:
            await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /approve <id_–∑–∞–ø—Ä–æ—Å–∞>")
            return
        
        request_id = context.args[0]
        
        conn = sqlite3.connect(get_db_path(), check_same_thread=False)
        cursor = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø—Ä–æ—Å–µ –í–ö–õ–Æ–ß–ê–Ø –î–ê–ù–ù–´–ï –û –§–ê–ô–õ–ï
        cursor.execute('''
            SELECT user_id, request_text, file_id, file_type, file_name 
            FROM requests 
            WHERE id = ? AND status = "pending"
        ''', (request_id,))
        request_data = cursor.fetchone()
        
        if not request_data:
            await update.message.reply_text("‚ùå –ó–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!")
            conn.close()
            return
        
        user_id, description, file_id, file_type, file_name = request_data
        
        # –°–û–ó–î–ê–ï–ú –ó–ê–ü–ò–°–¨ –í –¢–ê–ë–õ–ò–¶–ï –§–ê–ô–õ–û–í
        download_id = generate_download_id()
        
        try:
            cursor.execute('''
                INSERT INTO files (file_id, file_name, file_type, download_id, description, uploaded_by)
                VALUES (?, ?, ?, ?, ?, ?)
            ''', (file_id, file_name, file_type, download_id, description, user_id))
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–ø—Ä–æ—Å–∞
            cursor.execute('UPDATE requests SET status = "approved" WHERE id = ?', (request_id,))
            conn.commit()
            
            # –ü–æ–ª—É—á–∞–µ–º username –±–æ—Ç–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ
            try:
                bot_username = context.bot.username
                download_link = f"https://t.me/{bot_username}?start=download-{download_id}"
            except:
                download_link = f"–°—Å—ã–ª–∫–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞"
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            try:
                await context.bot.send_message(
                    user_id,
                    f"‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –æ–¥–æ–±—Ä–µ–Ω!\n\n"
                    f"üìÅ –§–∞–π–ª: {file_name}\n"
                    f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {description}\n"
                    f"üîó –°—Å—ã–ª–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è:\n{download_link}"
                )
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            
            await update.message.reply_text(
                f"‚úÖ –ó–∞–ø—Ä–æ—Å –æ–¥–æ–±—Ä–µ–Ω!\n\n"
                f"–°—Å—ã–ª–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è:\n{download_link}"
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")
        
        conn.close()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ approve_request: {e}")

async def reject_request(update, context):
    try:
        user = update.effective_user
        user_session = get_user_session(user.id)
        
        if not user_session or not user_session[3]:
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω! –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return
        
        if len(context.args) == 0:
            await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /reject <id_–∑–∞–ø—Ä–æ—Å–∞>")
            return
        
        request_id = context.args[0]
        
        conn = sqlite3.connect(get_db_path(), check_same_thread=False)
        cursor = conn.cursor()
        
        cursor.execute('SELECT user_id FROM requests WHERE id = ? AND status = "pending"', (request_id,))
        request_data = cursor.fetchone()
        
        if not request_data:
            await update.message.reply_text("‚ùå –ó–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!")
            conn.close()
            return
        
        user_id = request_data[0]
        
        cursor.execute('UPDATE requests SET status = "rejected" WHERE id = ?', (request_id,))
        conn.commit()
        conn.close()
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            await context.bot.send_message(
                user_id,
                "‚ùå –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
            )
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        
        await update.message.reply_text("‚úÖ –ó–∞–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω–µ–Ω!")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ reject_request: {e}")

async def handle_text(update, context):
    try:
        if not update.message:
            return
            
        if update.message.text and not update.message.text.startswith('/'):
            if not context.user_data.get('awaiting_file') and not context.user_data.get('admin_adding_file'):
                await update.message.reply_text(
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º."
                )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_text: {e}")

async def error_handler(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {context.error}")
    try:
        raise context.error
    except Exception as e:
        logger.exception("–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –æ—à–∏–±–æ–∫:")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ - –°–ò–ù–•–†–û–ù–ù–ê–Ø –¥–ª—è Railway"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
        try:
            from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackQueryHandler
        except ImportError:
            print("‚ùå –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ python-telegram-bot –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")
            print("–î–æ–±–∞–≤—å—Ç–µ –≤ requirements.txt: python-telegram-bot==20.7")
            return
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        init_db()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞
        if not BOT_TOKEN:
            logger.error("‚ùå BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –£–∫–∞–∂–∏—Ç–µ —Ç–æ–∫–µ–Ω –≤ –∫–æ–¥–µ.")
            return
        
        logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å —Ç–æ–∫–µ–Ω–æ–º: {BOT_TOKEN[:10]}...")
        
        # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –°–ò–ù–•–†–û–ù–ù–û
        application = Application.builder().token(BOT_TOKEN).build()
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CommandHandler("login", login))
        application.add_handler(CommandHandler("register", register))
        application.add_handler(CommandHandler("logout", logout))
        application.add_handler(CommandHandler("addadmin", add_admin_command))
        application.add_handler(CommandHandler("approve", approve_request))
        application.add_handler(CommandHandler("reject", reject_request))
        application.add_handler(CommandHandler("backup", backup_command))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback –∑–∞–ø—Ä–æ—Å–æ–≤
        application.add_handler(CallbackQueryHandler(button_handler))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ñ–∞–π–ª–∞–º–∏
        application.add_handler(MessageHandler(
            filters.Document.ALL | filters.PHOTO | filters.VIDEO | filters.AUDIO,
            handle_file
        ))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        application.add_error_handler(error_handler)
        
        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
        print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
        print(f"üìç –¢–æ–∫–µ–Ω: {BOT_TOKEN[:10]}...")
        print("‚èπÔ∏è –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
        
        # –ó–ê–ü–£–°–ö–ê–ï–ú –ë–û–¢–ê –°–ò–ù–•–†–û–ù–ù–û
        application.run_polling()
        
    except KeyboardInterrupt:
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ
        backup_database()
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        print("\nüõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        logger.error(f"–§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        print(f"‚ùå –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")

if __name__ == '__main__':
    main()
