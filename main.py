import os
import logging
import sqlite3
import secrets
import string
import asyncio
import time
from datetime import datetime
import hashlib

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è Railway
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
logger.info("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
all_env_vars = dict(os.environ)
logger.info(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {list(all_env_vars.keys())}")

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è Railway
BOT_TOKEN = os.environ.get('BOT_TOKEN')

# –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –∏–º–µ–Ω–∞
if not BOT_TOKEN:
    BOT_TOKEN = os.environ.get('TOKEN')
if not BOT_TOKEN:
    BOT_TOKEN = os.environ.get('BOT_TOKEN')

logger.info(f"üìã BOT_TOKEN –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è: {'***–£–°–¢–ê–ù–û–í–õ–ï–ù***' if BOT_TOKEN else '–ù–ï –ù–ê–ô–î–ï–ù'}")

# –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ—Ç —Ç–æ–∫–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
if not BOT_TOKEN:
    logger.warning("‚ö†Ô∏è BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    # –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–∂–Ω–æ –≤—Ä–µ–º–µ–Ω–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–∞—à —Ç–æ–∫–µ–Ω
BOT_TOKEN = "8493433461:AAEZxG0Ix7em5ff3XHF36EZCmZyPMkf6WZE"
    # –ù–æ –ª—É—á—à–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ

DEFAULT_ADMIN_PASSWORD = "34613461"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
RECONNECT_DELAY = 5
MAX_RECONNECT_ATTEMPTS = 10

# –û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π..


# –•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª–µ–π
def hash_password(password):
    return hashlib.sha256(password.encode()).hexdigest()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –¥–ª—è Railway
        db_path = '/tmp/files.db' if 'RAILWAY_ENVIRONMENT' in os.environ else 'files.db'
        conn = sqlite3.connect(db_path, check_same_thread=False)
        cursor = conn.cursor()
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É files
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS files (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                file_id TEXT NOT NULL,
                file_name TEXT NOT NULL,
                file_type TEXT NOT NULL,
                download_id TEXT UNIQUE NOT NULL,
                upload_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                description TEXT,
                uploaded_by INTEGER
            )
        ''')
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É requests
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS requests (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER NOT NULL,
                username TEXT,
                first_name TEXT,
                request_text TEXT NOT NULL,
                request_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                status TEXT DEFAULT 'pending',
                file_id TEXT,
                file_type TEXT,
                file_name TEXT
            )
        ''')
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER UNIQUE NOT NULL,
                username TEXT,
                first_name TEXT,
                password_hash TEXT,
                is_admin BOOLEAN DEFAULT FALSE,
                registration_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                last_login TIMESTAMP
            )
        ''')
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å–µ—Å—Å–∏–π
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS sessions (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER NOT NULL,
                session_token TEXT UNIQUE NOT NULL,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                expires_at TIMESTAMP,
                FOREIGN KEY (user_id) REFERENCES users (user_id)
            )
        ''')
        
        # –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        cursor.execute('SELECT * FROM users WHERE is_admin = TRUE')
        if not cursor.fetchone():
            admin_hash = hash_password(DEFAULT_ADMIN_PASSWORD)
            cursor.execute('''
                INSERT OR IGNORE INTO users (user_id, username, first_name, password_hash, is_admin)
                VALUES (?, ?, ?, ?, ?)
            ''', (1, 'admin', 'Administrator', admin_hash, True))
            logger.info("–°–æ–∑–¥–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
        
        conn.commit()
        conn.close()
        logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")

# –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—É—Ç–∏ –∫ –ë–î
def get_db_path():
    return '/tmp/files.db' if 'RAILWAY_ENVIRONMENT' in os.environ else 'files.db'

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
def generate_download_id():
    alphabet = string.ascii_letters + string.digits
    return ''.join(secrets.choice(alphabet) for _ in range(10))

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞ —Å–µ—Å—Å–∏–∏
def generate_session_token():
    return secrets.token_hex(32)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_user_session(user_id):
    try:
        conn = sqlite3.connect(get_db_path(), check_same_thread=False)
        cursor = conn.cursor()
        cursor.execute('''
            SELECT u.user_id, u.username, u.first_name, u.is_admin 
            FROM users u 
            JOIN sessions s ON u.user_id = s.user_id 
            WHERE u.user_id = ? AND s.expires_at > datetime('now')
        ''', (user_id,))
        user = cursor.fetchone()
        conn.close()
        return user
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏: {e}")
        return None

# –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def create_user_session(user_id, is_admin=False):
    try:
        conn = sqlite3.connect(get_db_path(), check_same_thread=False)
        cursor = conn.cursor()
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–µ—Å—Å–∏–∏
        cursor.execute('DELETE FROM sessions WHERE user_id = ?', (user_id,))
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é (–¥–µ–π—Å—Ç–≤—É–µ—Ç 30 –¥–Ω–µ–π)
        session_token = generate_session_token()
        expires_at = datetime.now().timestamp() + 30 * 24 * 60 * 60
        
        cursor.execute('''
            INSERT INTO sessions (user_id, session_token, expires_at)
            VALUES (?, ?, datetime(?, 'unixepoch'))
        ''', (user_id, session_token, expires_at))
        
        conn.commit()
        conn.close()
        return session_token
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏: {e}")
        return None

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def register_user(user_id, username, first_name, password):
    try:
        conn = sqlite3.connect(get_db_path(), check_same_thread=False)
        cursor = conn.cursor()
        
        password_hash = hash_password(password)
        
        try:
            cursor.execute('''
                INSERT INTO users (user_id, username, first_name, password_hash, is_admin)
                VALUES (?, ?, ?, ?, ?)
            ''', (user_id, username, first_name, password_hash, False))
            conn.commit()
            success = True
        except sqlite3.IntegrityError:
            success = False
        
        conn.close()
        return success
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        return False

# –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def authenticate_user(user_id, password):
    try:
        conn = sqlite3.connect(get_db_path(), check_same_thread=False)
        cursor = conn.cursor()
        
        cursor.execute('SELECT password_hash, is_admin FROM users WHERE user_id = ?', (user_id,))
        user = cursor.fetchone()
        conn.close()
        
        if user and user[0] == hash_password(password):
            return user[1]
        return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")
        return None

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_user_stats(user_id):
    try:
        conn = sqlite3.connect(get_db_path(), check_same_thread=False)
        cursor = conn.cursor()
        
        cursor.execute('SELECT COUNT(*) FROM files WHERE uploaded_by = ?', (user_id,))
        files_count = cursor.fetchone()[0]
        
        cursor.execute('SELECT COUNT(*) FROM requests WHERE user_id = ?', (user_id,))
        requests_count = cursor.fetchone()[0]
        
        cursor.execute('SELECT COUNT(*) FROM requests WHERE user_id = ? AND status = "approved"', (user_id,))
        approved_requests = cursor.fetchone()[0]
        
        conn.close()
        
        return {
            'files_count': files_count,
            'requests_count': requests_count,
            'approved_requests': approved_requests
        }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        return {'files_count': 0, 'requests_count': 0, 'approved_requests': 0}

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
def add_admin(user_id, current_admin_id):
    try:
        conn = sqlite3.connect(get_db_path(), check_same_thread=False)
        cursor = conn.cursor()
        
        cursor.execute('SELECT is_admin FROM users WHERE user_id = ?', (current_admin_id,))
        current_user = cursor.fetchone()
        
        if not current_user or not current_user[0]:
            conn.close()
            return False
        
        cursor.execute('UPDATE users SET is_admin = TRUE WHERE user_id = ?', (user_id,))
        conn.commit()
        conn.close()
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞: {e}")
        return False

async def start(update, context):
    try:
        user = update.effective_user
        
        if context.args and len(context.args) > 0 and context.args[0].startswith('download-'):
            download_id = context.args[0].replace('download-', '')
            await handle_download(update, context, download_id)
            return
        
        user_session = get_user_session(user.id)
        
        from telegram import InlineKeyboardButton, InlineKeyboardMarkup
        
        if user_session:
            is_admin = user_session[3]
            
            if is_admin:
                keyboard = [
                    [InlineKeyboardButton("üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data='personal_cabinet')],
                    [InlineKeyboardButton("üë®‚Äçüíª –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data='admin_panel')],
                    [InlineKeyboardButton("üì• –°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª", callback_data='download')],
                    [InlineKeyboardButton("üì§ –ó–∞–ø—Ä–æ—Å–∏—Ç—å —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ —Ñ–∞–π–ª–∞", callback_data='request_upload')],
                    [InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data='help')]
                ]
            else:
                keyboard = [
                    [InlineKeyboardButton("üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data='personal_cabinet')],
                    [InlineKeyboardButton("üì• –°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª", callback_data='download')],
                    [InlineKeyboardButton("üì§ –ó–∞–ø—Ä–æ—Å–∏—Ç—å —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ —Ñ–∞–π–ª–∞", callback_data='request_upload')],
                    [InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data='help')]
                ]
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            welcome_text = f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n\n"
            if is_admin:
                welcome_text += "üîß –í—ã –≤–æ—à–ª–∏ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä\n\n"
            welcome_text += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
            
        else:
            keyboard = [
                [InlineKeyboardButton("üîê –í–æ–π—Ç–∏", callback_data='login')],
                [InlineKeyboardButton("üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", callback_data='register')],
                [InlineKeyboardButton("üì• –°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª", callback_data='download')],
                [InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data='help')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            welcome_text = f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n\n" \
                          "üîê –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è\n\n" \
                          "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        
        if update.message:
            await update.message.reply_text(welcome_text, reply_markup=reply_markup)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ start: {e}")

# –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Å—Ç–∞—é—Ç—Å—è –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã–º–∏, –Ω–æ —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º try-except –±–ª–æ–∫–æ–≤
# –î–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –º–µ—Å—Ç–∞ –ø–æ–∫–∞–∂—É —Ç–æ–ª—å–∫–æ –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–µ —á–∞—Å—Ç–∏...

async def handle_download(update, context, download_id):
    try:
        conn = sqlite3.connect(get_db_path(), check_same_thread=False)
        cursor = conn.cursor()
        
        cursor.execute('SELECT file_id, file_name, file_type, description FROM files WHERE download_id = ?', (download_id,))
        file_data = cursor.fetchone()
        conn.close()
        
        if file_data:
            file_id, file_name, file_type, description = file_data
            
            caption = f"üìÅ {file_name}"
            if description:
                caption += f"\nüìù {description}"
            
            try:
                if file_type == 'photo':
                    await update.message.reply_photo(file_id, caption=caption)
                elif file_type == 'video':
                    await update.message.reply_video(file_id, caption=caption)
                elif file_type == 'document':
                    await update.message.reply_document(file_id, caption=caption)
                elif file_type == 'audio':
                    await update.message.reply_audio(file_id, caption=caption)
                else:
                    await update.message.reply_document(file_id, caption=caption)
            except Exception as e:
                await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: {e}")
        else:
            await update.message.reply_text("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —Å—Å—ã–ª–∫–∞ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_download: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")

# –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (login, register, button_handler –∏ —Ç.–¥.) 
# –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ –æ–±–µ—Ä–Ω—É—Ç—ã –≤ try-except –±–ª–æ–∫–∏

async def error_handler(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {context.error}")
    try:
        raise context.error
    except Exception as e:
        logger.exception("–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –æ—à–∏–±–æ–∫:")

async def run_bot():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ –¥–ª—è Railway"""
    try:
        from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackQueryHandler
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        init_db()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞
        if not BOT_TOKEN or BOT_TOKEN == '8493433461:AAEZxG0Ix7em5ff3XHF36EZCmZyPMkf6WZE':
            logger.error("‚ùå BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –î–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è Railway.")
            return
        
        application = Application.builder().token(BOT_TOKEN).build()
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CommandHandler("login", login))
        application.add_handler(CommandHandler("register", register))
        application.add_handler(CommandHandler("logout", logout))
        application.add_handler(CommandHandler("addadmin", add_admin_command))
        application.add_handler(CommandHandler("approve", approve_request))
        application.add_handler(CommandHandler("reject", reject_request))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback –∑–∞–ø—Ä–æ—Å–æ–≤
        application.add_handler(CallbackQueryHandler(button_handler))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ñ–∞–π–ª–∞–º–∏
        application.add_handler(MessageHandler(
            filters.Document.ALL | filters.PHOTO | filters.VIDEO | filters.AUDIO,
            handle_file
        ))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        application.add_error_handler(error_handler)
        
        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–∞ Railway...")
        print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞ Railway!")
        print("üìç –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ë–î:", get_db_path())
        print("üîë –¢–æ–∫–µ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:", bool(BOT_TOKEN and BOT_TOKEN != '8493433461:AAEZxG0Ix7em5ff3XHF36EZCmZyPMkf6WZE'))
        
        await application.run_polling()
        
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        raise

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –¥–ª—è Railway"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
        try:
            from telegram.ext import Application
        except ImportError:
            print("‚ùå –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ python-telegram-bot –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")
            print("–î–æ–±–∞–≤—å—Ç–µ –≤ requirements.txt: python-telegram-bot==20.7")
            return
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        asyncio.run(run_bot())
        
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        print("\nüõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        logger.error(f"–§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        print(f"‚ùå –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")

if __name__ == '__main__':
    main()
